from django.db import models
from tagging.fields import TagField
from tagging.models import Tag

class Ingredient(models.Model):
    name = models.CharField(max_length=40)
    image = models.CharField(max_length=40)

    tags = TagField()

    # percent DV
    protein = models.PositiveSmallIntegerField(default=0)
    iron = models.PositiveSmallIntegerField(default=0)
    calcium = models.PositiveSmallIntegerField(default=0)
    fiber = models.PositiveSmallIntegerField(default=0)
    carbs = models.PositiveSmallIntegerField(default=0)
    fats = models.PositiveSmallIntegerField(default=0)

    isVegetarian = models.BooleanField(blank=False)
    isVegan = models.BooleanField(blank=False)

    dishes = models.ManyToManyField('Dish', related_name='ingredients', null=True, blank=True)
    substitutes = models.ManyToManyField('self', symmetrical=False, related_name='substitutee', null=True, blank=True)

    def __unicode__(self):
        return self.name

    class Meta:
        ordering = ('name',)

class Dish(models.Model):
    name = models.CharField(max_length=40)
    image = models.CharField(max_length=40)

    tags = TagField()

    # percent DV
    protein = models.PositiveSmallIntegerField(default=0)
    iron = models.PositiveSmallIntegerField(default=0)
    calcium = models.PositiveSmallIntegerField(default=0)
    fiber = models.PositiveSmallIntegerField(default=0)
    carbs = models.PositiveSmallIntegerField(default=0)
    fats = models.PositiveSmallIntegerField(default=0)

    isVegetarian = models.BooleanField(blank=False)
    isVegan = models.BooleanField(blank=False)

    # "ingredients" of Ingredient objects by related_name
    # substitutes of ingredeints generated by iterating through "ingredients"

    similar = models.ManyToManyField('self', symmetrical=True, null=True, blank=True)

    def __unicode__(self):
        return self.name

    class Meta:
        ordering = ('name',)
